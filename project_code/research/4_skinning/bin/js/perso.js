// Generated by CoffeeScript 1.6.3
var Perso, PersoJoint,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

PersoJoint = (function() {
  function PersoJoint(radius) {
    this.radius = radius != null ? radius : 0.005;
    this.onMouseUp = __bind(this.onMouseUp, this);
    this.onDrag = __bind(this.onDrag, this);
    this.onMouseDown = __bind(this.onMouseDown, this);
    this.onMouseOut = __bind(this.onMouseOut, this);
    this.onMouseOver = __bind(this.onMouseOver, this);
    this.isDragged = false;
    this.view = new PIXI.Graphics();
    this.view.interactive = true;
    this.view.mouseover = this.onMouseOver;
    this.view.mouseout = this.onMouseOut;
    this.view.mousedown = this.onMouseDown;
    this.view.buttonMode = true;
    this.setRadius(this.radius);
  }

  PersoJoint.prototype.setRadius = function(radius) {
    this.radius = radius;
    this.view.hitArea = new PIXI.Circle(0, 0, this.radius);
    return this.draw();
  };

  PersoJoint.prototype.draw = function(color) {
    if (color == null) {
      color = 0xff0000;
    }
    this.view.clear();
    this.view.lineStyle(1, color);
    return this.view.drawCircle(0, 0, this.radius);
  };

  PersoJoint.prototype.onMouseOver = function() {
    this.view.alpha = 0.5;
    return this.draw(0x00ffff);
  };

  PersoJoint.prototype.onMouseOut = function() {
    this.view.alpha = 1;
    return this.draw(0xff0000);
  };

  PersoJoint.prototype.onMouseDown = function() {
    this.isDragged = true;
    stage.mouseup = this.onMouseUp;
    return stage.mousemove = this.onDrag;
  };

  PersoJoint.prototype.onDrag = function(ev) {
    this.view.position.x = ev.originalEvent.clientX - this.view.parent.position.x;
    this.view.position.y = ev.originalEvent.clientY - this.view.parent.position.y;
    if (this.draggedCallback) {
      return this.draggedCallback();
    }
  };

  PersoJoint.prototype.onMouseUp = function() {
    this.isDragged = false;
    stage.mouseup = null;
    return stage.mousemove = null;
  };

  return PersoJoint;

})();

Perso = (function() {
  Perso.radius = [0.020, 0, 0.008, 0.008, 0.003, 0.003, 0.003, 0.003, 0.025, 0.012, 0.012, 0.008, 0.008, 0.003, 0.003];

  Perso.morph = {
    shouldersToHead: 0.6,
    shouldersAppart: 0.05,
    elbowsToShoulders: 0.25,
    torsoLow: 0.3,
    hipsCloser: 0.25,
    lowFeet: 0.2
  };

  function Perso() {
    var i, jnt, _i, _ref,
      _this = this;
    this.view = new PIXI.DisplayObjectContainer();
    this.joints = [];
    for (i = _i = 0, _ref = NiTE.NUM_JOINTS; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      jnt = new PersoJoint();
      jnt.draggedCallback = function() {
        return _this.update();
      };
      if (i !== NiTE.NECK) {
        this.view.addChild(jnt.view);
      }
      this.joints.push(jnt);
    }
    this.gfx = new PIXI.Graphics();
    this.view.addChild(this.gfx);
  }

  Perso.prototype.setFromSkeleton = function(skeleton) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = skeleton.joints.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.joints[i].view.position.x = skeleton.joints[i].view.position.x;
      this.joints[i].view.position.y = skeleton.joints[i].view.position.y;
      this.joints[i].setRadius(Perso.radius[i] * skeleton.width * 2);
    }
    return this.morphSkeleton();
  };

  Perso.prototype.morphSkeleton = function() {
    var headP, leftElbowP, leftFootP, leftHipP, leftKneeP, leftShouldP, rightElbowP, rightFootP, rightHipP, rightKneeP, rightShouldP, torsoP;
    headP = this.getPos(NiTE.HEAD);
    leftShouldP = this.getPos(NiTE.LEFT_SHOULDER);
    rightShouldP = this.getPos(NiTE.RIGHT_SHOULDER);
    leftElbowP = this.getPos(NiTE.LEFT_ELBOW);
    rightElbowP = this.getPos(NiTE.RIGHT_ELBOW);
    leftHipP = this.getPos(NiTE.LEFT_HIP);
    rightHipP = this.getPos(NiTE.RIGHT_HIP);
    leftKneeP = this.getPos(NiTE.LEFT_KNEE);
    rightKneeP = this.getPos(NiTE.RIGHT_KNEE);
    leftFootP = this.getPos(NiTE.LEFT_FOOT);
    rightFootP = this.getPos(NiTE.RIGHT_FOOT);
    torsoP = this.getPos(NiTE.TORSO);
    leftShouldP.y += (headP.y - leftShouldP.y) * Perso.morph.shouldersToHead;
    rightShouldP.y += (headP.y - rightShouldP.y) * Perso.morph.shouldersToHead;
    leftShouldP.x += (-rightShouldP.x + leftShouldP.x) * Perso.morph.shouldersAppart;
    rightShouldP.x += (-leftShouldP.x + rightShouldP.x) * Perso.morph.shouldersAppart;
    leftElbowP.y += (rightShouldP.y - leftElbowP.y) * Perso.morph.elbowsToShoulders;
    rightElbowP.y += (leftShouldP.y - rightElbowP.y) * Perso.morph.elbowsToShoulders;
    torsoP.y += ((rightHipP.y + leftHipP.y) / 2 - torsoP.y) * Perso.morph.torsoLow;
    leftHipP.x += (rightHipP.x - leftHipP.x) * Perso.morph.hipsCloser;
    rightHipP.x += (leftHipP.x - rightHipP.x) * Perso.morph.hipsCloser;
    leftFootP.y += (-leftKneeP.y + leftFootP.y) * Perso.morph.lowFeet;
    return rightFootP.y += (-rightKneeP.y + leftFootP.y) * Perso.morph.lowFeet;
  };

  Perso.prototype.getPos = function(joinType) {
    return this.joints[joinType].view.position;
  };

  Perso.prototype.update = function() {
    var bone, j1p, j2p, lsp, np, rsp, _i, _len, _ref;
    this.gfx.clear();
    this.gfx.lineStyle(1, 0x000000, 0.3);
    np = this.getPos(NiTE.NECK);
    rsp = this.getPos(NiTE.LEFT_SHOULDER);
    lsp = this.getPos(NiTE.RIGHT_SHOULDER);
    np.x = (lsp.x + rsp.x) / 2;
    np.y = (lsp.y + rsp.y) / 2;
    _ref = NiTE.bones;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      bone = _ref[_i];
      j1p = this.getPos(bone[0]);
      j2p = this.getPos(bone[1]);
      this.gfx.moveTo(j1p.x, j1p.y);
      this.gfx.lineTo(j2p.x, j2p.y);
    }
    this.gfx.lineStyle(1, 0x000000, 1);
    this.drawCircleTangents(NiTE.LEFT_SHOULDER, NiTE.TORSO, [0]);
    this.drawCircleTangents(NiTE.RIGHT_SHOULDER, NiTE.TORSO, [1]);
    this.drawTangent(NiTE.HEAD, NiTE.LEFT_SHOULDER, [1]);
    this.drawTangent(NiTE.HEAD, NiTE.RIGHT_SHOULDER, [0]);
    this.drawCircleTangents(NiTE.LEFT_HIP, NiTE.TORSO, [1]);
    this.drawCircleTangents(NiTE.RIGHT_HIP, NiTE.TORSO, [0]);
    this.drawCircleTangents(NiTE.RIGHT_HIP, NiTE.LEFT_HIP, [1]);
    this.drawCircleTangents(NiTE.LEFT_SHOULDER, NiTE.LEFT_ELBOW);
    this.drawCircleTangents(NiTE.LEFT_ELBOW, NiTE.LEFT_HAND);
    this.drawCircleTangents(NiTE.RIGHT_SHOULDER, NiTE.RIGHT_ELBOW);
    this.drawCircleTangents(NiTE.RIGHT_ELBOW, NiTE.RIGHT_HAND);
    this.drawCircleTangents(NiTE.LEFT_HIP, NiTE.LEFT_KNEE);
    this.drawCircleTangents(NiTE.LEFT_KNEE, NiTE.LEFT_FOOT);
    this.drawCircleTangents(NiTE.RIGHT_HIP, NiTE.RIGHT_KNEE);
    return this.drawCircleTangents(NiTE.RIGHT_KNEE, NiTE.RIGHT_FOOT);
  };

  Perso.prototype.drawTangent = function(j1_type, j2_type, indexes) {
    var i, j, jp, px, py, tangents, tgt, _i, _len, _results;
    if (indexes == null) {
      indexes = [0, 1];
    }
    px = this.getPos(j1_type).x;
    py = this.getPos(j1_type).y;
    j = this.joints[j2_type];
    jp = j.view.position;
    tangents = this.getTangent(px, py, jp.x, jp.y, j.radius);
    if (tangents) {
      _results = [];
      for (_i = 0, _len = indexes.length; _i < _len; _i++) {
        i = indexes[_i];
        tgt = tangents[i];
        this.gfx.moveTo(px, py);
        _results.push(this.gfx.lineTo(tgt[0], tgt[1]));
      }
      return _results;
    }
  };

  Perso.prototype.getTangent = function(px, py, cx, cy, radius) {
    var a, b, dd, dx, dy, t;
    dx = cx - px;
    dy = cy - py;
    dd = Math.sqrt(dx * dx + dy * dy);
    a = Math.asin(radius / dd);
    b = Math.atan2(dy, dx);
    t = [];
    t[0] = [cx + radius * Math.sin(b - a), cy + radius * -Math.cos(b - a)];
    t[1] = [cx + radius * -Math.sin(b + a), cy + radius * Math.cos(b + a)];
    return t;
  };

  Perso.prototype.drawCircleTangents = function(j1_type, j2_type, indexes) {
    var i, j1, j1p, j2, j2p, tangents, tgt, _i, _len, _results;
    if (indexes == null) {
      indexes = [0, 1];
    }
    j1 = this.joints[j1_type];
    j1p = j1.view.position;
    j2 = this.joints[j2_type];
    j2p = j2.view.position;
    tangents = this.getCircleTangents(j1p.x, j1p.y, j1.radius, j2p.x, j2p.y, j2.radius);
    if (tangents) {
      _results = [];
      for (_i = 0, _len = indexes.length; _i < _len; _i++) {
        i = indexes[_i];
        tgt = tangents[i];
        this.gfx.moveTo(tgt[0], tgt[1]);
        _results.push(this.gfx.lineTo(tgt[2], tgt[3]));
      }
      return _results;
    }
  };

  Perso.prototype.getCircleTangents = function(x1, y1, r1, x2, y2, r2) {
    var a, c, d, d_sq, h, i, nx, ny, res, sign1, sign2, vx, vy, _i, _j;
    d_sq = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
    if (d_sq <= (r1 - r2) * (r1 - r2)) {
      return null;
    }
    d = Math.sqrt(d_sq);
    vx = (x2 - x1) / d;
    vy = (y2 - y1) / d;
    res = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];
    i = 0;
    for (sign1 = _i = 1; _i >= -1; sign1 = _i += -2) {
      c = (r1 - sign1 * r2) / d;
      if (c * c > 1.0) {
        continue;
      }
      h = Math.sqrt(Math.max(0.0, 1.0 - c * c));
      for (sign2 = _j = 1; _j >= -1; sign2 = _j += -2) {
        nx = vx * c - sign2 * h * vy;
        ny = vy * c + sign2 * h * vx;
        a = res[i++];
        a[0] = x1 + r1 * nx;
        a[1] = y1 + r1 * ny;
        a[2] = x2 + sign1 * r2 * nx;
        a[3] = y2 + sign1 * r2 * ny;
      }
    }
    return res;
  };

  return Perso;

})();
