// Generated by CoffeeScript 1.6.3
var animate, appHeight, appWidth, cameraPosition, cameraPositionInit, handheld, img_suffix, load, mouse, mouseMoved, onAssetsLoaded, params, plops, renderer, setup, stage, stats, touch, touchInit, touchMoved, touchStarted, windowResized;

params = {
  colors: [0x35a1af, 0x7da2a1, 0x4e976b, 0x79a262, 0xd1e6ba, 0x3b6b78, 0xe73464, 0xc6d8d6],
  numParticles: 175,
  numPlops: 3,
  radius: 150 * window.devicePixelRatio,
  animatedRatio: 0.1
};

handheld = window.innerWidth < 640;

if (handheld) {
  params.numPlops = 3;
}

img_suffix = '';

if (window.devicePixelRatio > 1.0) {
  img_suffix = '-hd';
}

stats = null;

stage = null;

renderer = null;

plops = [];

mouse = {
  x: 0,
  y: 0
};

touch = {
  x: 0,
  y: 0
};

touchInit = {
  x: 0,
  y: 0
};

cameraPosition = {
  x: 0,
  y: 0
};

cameraPositionInit = {
  x: 0,
  y: 0
};

appWidth = window.innerWidth;

appHeight = window.innerHeight;

setup = function() {
  stats = new Stats();
  document.body.appendChild(stats.domElement);
  stage = new PIXI.Stage(0xFFFFFF);
  renderer = PIXI.autoDetectRenderer(appWidth, appHeight);
  windowResized();
  load();
  document.body.appendChild(renderer.view);
  window.addEventListener('resize', windowResized);
  if (handheld) {
    renderer.view.addEventListener('touchstart', touchStarted);
    return renderer.view.addEventListener('touchmove', touchMoved);
  } else {
    return renderer.view.addEventListener('mousemove', mouseMoved);
  }
};

windowResized = function(ev) {
  appWidth = window.innerWidth;
  appHeight = window.innerHeight;
  renderer.resize(appWidth * window.devicePixelRatio, appHeight * window.devicePixelRatio);
  renderer.view.style.width = appWidth + 'px';
  return renderer.view.style.height = appHeight + 'px';
};

mouseMoved = function(ev) {
  mouse.x = ev.pageX * window.devicePixelRatio;
  return mouse.y = ev.pageY * window.devicePixelRatio;
};

touchStarted = function(ev) {
  touchInit = {
    x: ev.touches[0].pageX * window.devicePixelRatio,
    y: ev.touches[0].pageY * window.devicePixelRatio
  };
  cameraPositionInit.x = cameraPosition.x;
  return cameraPositionInit.y = cameraPosition.y;
};

touchMoved = function(ev) {
  touch.x = ev.touches[0].pageX * window.devicePixelRatio;
  touch.y = ev.touches[0].pageY * window.devicePixelRatio;
  cameraPosition.x = cameraPositionInit.x + (touch.x - touchInit.x);
  return cameraPosition.y = cameraPositionInit.y + (touch.y - touchInit.y);
};

load = function() {
  var assetsToLoader, loader;
  assetsToLoader = ['assets/plop_anim' + img_suffix + '.json'];
  loader = new PIXI.AssetLoader(assetsToLoader);
  loader.onComplete = onAssetsLoaded;
  return loader.load();
};

onAssetsLoaded = function() {
  var i, plop, _i, _ref;
  for (i = _i = 0, _ref = params.numPlops; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    plop = new Plop();
    plop.position.x = (i - (params.numPlops - 1) * 0.5) * (params.radius * 2 + 50);
    stage.addChild(plop);
    plops.push(plop);
  }
  return requestAnimFrame(animate);
};

animate = function() {
  var p, _i, _j, _len, _len1;
  stats.begin();
  requestAnimFrame(animate);
  if (handheld) {
    for (_i = 0, _len = plops.length; _i < _len; _i++) {
      p = plops[_i];
      p.update(cameraPosition.x, cameraPosition.y);
    }
  } else {
    for (_j = 0, _len1 = plops.length; _j < _len1; _j++) {
      p = plops[_j];
      p.update(mouse.x, mouse.y);
    }
  }
  renderer.render(stage);
  return stats.end();
};

setup();
