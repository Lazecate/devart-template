// Generated by CoffeeScript 1.6.3
var SkeletonSync,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

SkeletonSync = (function() {
  function SkeletonSync(skeleton) {
    this.skeleton = skeleton;
    this.onSocketMessage = __bind(this.onSocketMessage, this);
    this.onSocketClosed = __bind(this.onSocketClosed, this);
    this.onSocketOpened = __bind(this.onSocketOpened, this);
    this.socket = null;
    this.reconnecting = false;
    this.onUserIn = null;
    this.onUserOut = null;
    this.onRatio = null;
    this.onDataUpdated = null;
    this.connect();
  }

  SkeletonSync.prototype.connect = function() {
    this.socket = new WebSocket('ws://kikko.local:9092');
    this.socket.binaryType = 'arraybuffer';
    this.socket.onopen = this.onSocketOpened;
    this.socket.onmessage = this.onSocketMessage;
    return this.socket.onclose = this.onSocketClosed;
  };

  SkeletonSync.prototype.onSocketOpened = function() {
    return console.log("websocket connected");
  };

  SkeletonSync.prototype.onSocketClosed = function() {
    var _this = this;
    if (!this.reconnecting) {
      console.log("websocket disconnected");
    }
    setTimeout(function() {
      return _this.connect();
    }, 2000);
    return this.reconnecting = true;
  };

  SkeletonSync.prototype.onSocketMessage = function(msg) {
    var cmd;
    if (msg.data instanceof ArrayBuffer) {
      skeleton.data = new Float32Array(msg.data);
      if (this.onDataUpdated) {
        return onDataUpdated();
      }
    } else {
      if (msg.data === '/skeleton') {

      } else {
        cmd = msg.data.split('/');
        cmd.shift();
        switch (cmd[0]) {
          case 'user':
            if (cmd[1] === 'in') {
              if (this.onUserIn) {
                return this.onUserIn(cmd[2]);
              }
            } else {
              if (this.onUserOut) {
                return this.onUserOut(cmd[2]);
              }
            }
            break;
          case 'ratio':
            if (this.onRatio) {
              return this.onRatio(parseFloat(cmd[1]) / parseFloat(cmd[2]));
            }
            break;
          default:
            return console.log(msg.data);
        }
      }
    }
  };

  return SkeletonSync;

})();
