// Generated by CoffeeScript 1.6.3
var Joint, NiTE, Skeleton;

NiTE = (function() {
  function NiTE() {}

  NiTE.NUM_JOINTS = 15;

  NiTE.HEAD = 0;

  NiTE.NECK = 1;

  NiTE.LEFT_SHOULDER = 2;

  NiTE.RIGHT_SHOULDER = 3;

  NiTE.LEFT_ELBOW = 4;

  NiTE.RIGHT_ELBOW = 5;

  NiTE.LEFT_HAND = 6;

  NiTE.RIGHT_HAND = 7;

  NiTE.TORSO = 8;

  NiTE.LEFT_HIP = 9;

  NiTE.RIGHT_HIP = 10;

  NiTE.LEFT_KNEE = 11;

  NiTE.RIGHT_KNEE = 12;

  NiTE.LEFT_FOOT = 13;

  NiTE.RIGHT_FOOT = 14;

  NiTE.bones = [[NiTE.HEAD, NiTE.NECK], [NiTE.LEFT_SHOULDER, NiTE.RIGHT_SHOULDER], [NiTE.LEFT_SHOULDER, NiTE.TORSO], [NiTE.LEFT_SHOULDER, NiTE.LEFT_ELBOW], [NiTE.LEFT_ELBOW, NiTE.LEFT_HAND], [NiTE.RIGHT_SHOULDER, NiTE.TORSO], [NiTE.RIGHT_SHOULDER, NiTE.RIGHT_ELBOW], [NiTE.RIGHT_ELBOW, NiTE.RIGHT_HAND], [NiTE.LEFT_HIP, NiTE.RIGHT_HIP], [NiTE.LEFT_HIP, NiTE.TORSO], [NiTE.LEFT_HIP, NiTE.LEFT_KNEE], [NiTE.LEFT_KNEE, NiTE.LEFT_FOOT], [NiTE.RIGHT_HIP, NiTE.TORSO], [NiTE.RIGHT_HIP, NiTE.RIGHT_KNEE], [NiTE.RIGHT_KNEE, NiTE.RIGHT_FOOT]];

  return NiTE;

})();

Joint = (function() {
  function Joint() {
    this.view = new PIXI.Graphics();
    this.view.beginFill(0x000000);
    this.view.drawCircle(0, 0, 5);
  }

  return Joint;

})();

Skeleton = (function() {
  function Skeleton() {
    var i, j, _i, _ref;
    this.view = new PIXI.DisplayObjectContainer();
    this.gfx = new PIXI.Graphics();
    this.view.addChild(this.gfx);
    this.width = 0;
    this.height = 0;
    this.numJoints = 15;
    this.joints = [];
    this.data = [];
    this.dataRatio = 1;
    for (i = _i = 0, _ref = NiTE.NUM_JOINTS; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      j = new Joint();
      this.view.addChild(j.view);
      this.joints.push(j);
    }
  }

  Skeleton.prototype.resize = function() {
    if (window.innerWidth > window.innerHeight) {
      this.height = window.innerHeight * 0.5 * window.devicePixelRatio;
      return this.width = this.height * this.dataRatio;
    } else {
      this.width = window.innerWidth * 0.5 * window.devicePixelRatio;
      return this.height = this.width * this.dataRatio;
    }
  };

  Skeleton.prototype.toString = function() {
    var i, str, _i, _ref;
    str = "";
    for (i = _i = 0, _ref = this.data.length; _i < _ref; i = _i += 3) {
      str += ("" + (i / 3) + " - " + this.data[i] + " - " + this.data[i + 1]) + '\n';
    }
    return str;
  };

  Skeleton.prototype.update = function(speed) {
    var i, jnt, _i, _ref;
    if (speed == null) {
      speed = 0.2;
    }
    for (i = _i = 0, _ref = this.data.length; _i < _ref; i = _i += 3) {
      jnt = this.joints[i / 3];
      jnt.view.position.x += (this.data[i] * this.width - jnt.view.position.x) * speed;
      jnt.view.position.y += (this.data[i + 1] * this.width - jnt.view.position.y) * speed;
    }
    return this.draw();
  };

  Skeleton.prototype.draw = function() {
    var bone, j1p, j2p, _i, _len, _ref, _results;
    this.gfx.clear();
    this.gfx.lineStyle(2, 0x000000, 1);
    _ref = NiTE.bones;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      bone = _ref[_i];
      j1p = this.joints[bone[0]].view.position;
      j2p = this.joints[bone[1]].view.position;
      this.gfx.moveTo(j1p.x, j1p.y);
      _results.push(this.gfx.lineTo(j2p.x, j2p.y));
    }
    return _results;
  };

  return Skeleton;

})();
