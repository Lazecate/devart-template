// Generated by CoffeeScript 1.6.3
var animate, appHeight, appWidth, assets, cameraPosition, cameraPositionInit, connect, handheld, mouse, mouseMoved, onAssetsLoaded, onSocketConnected, params, plops, renderer, setup, socket, socket_id, stage, touch, touchInit, touchMoved, touchStarted, viewports, windowResized;

params = {
  colors: [0x35a1af, 0x7da2a1, 0x4e976b, 0x79a262, 0xd1e6ba, 0x3b6b78, 0xe73464, 0xc6d8d6],
  numParticles: 175,
  numPlops: 1,
  radius: 150 * window.devicePixelRatio,
  animatedRatio: 0.2
};

handheld = window.innerWidth <= 640;

stage = null;

renderer = null;

assets = null;

plops = [];

viewports = null;

socket = null;

socket_id = null;

mouse = {
  x: 0,
  y: 0
};

touch = {
  x: 0,
  y: 0
};

touchInit = {
  x: 0,
  y: 0
};

cameraPosition = {
  x: 0,
  y: 0
};

cameraPositionInit = {
  x: 0,
  y: 0
};

appWidth = window.innerWidth;

appHeight = window.innerHeight;

setup = function() {
  stage = new PIXI.Stage(0xFFFFFF);
  renderer = PIXI.autoDetectRenderer(appWidth, appHeight);
  document.body.appendChild(renderer.view);
  if (handheld) {
    renderer.view.style.display = 'none';
  }
  windowResized();
  window.addEventListener('resize', windowResized);
  if (handheld) {
    renderer.view.addEventListener('touchstart', touchStarted);
    renderer.view.addEventListener('touchmove', touchMoved);
  } else {
    renderer.view.addEventListener('mousemove', mouseMoved);
  }
  assets = new Assets();
  return assets.load(onAssetsLoaded);
};

onAssetsLoaded = function() {
  var i, plop, _i, _ref;
  for (i = _i = 0, _ref = params.numPlops; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    plop = new Plops();
    plop.view.position.x = (i - (params.numPlops - 1) * 0.5) * (params.radius * 2 + 50);
    stage.addChild(plop.view);
    plops.push(plop);
  }
  if (!handheld) {
    viewports = new Viewports();
    stage.addChildAt(viewports.view, 0);
  }
  connect();
  return requestAnimFrame(animate);
};

connect = function() {
  socket = io.connect('http://kikko.local:8080');
  socket.on('connect', onSocketConnected);
  return socket.on('id', function(id) {
    socket_id = id;
    if (handheld) {
      return socket.emit('viewport_enter', socket_id, cameraPosition.x, cameraPosition.y, appWidth, appHeight);
    }
  });
};

onSocketConnected = function() {
  if (handheld) {
    return socket.on('blob_position', function(position) {
      var p, _i, _len;
      position.x *= window.devicePixelRatio;
      position.y *= window.devicePixelRatio;
      if (mouse.x === 0 && mouse.y === 0) {
        for (_i = 0, _len = plops.length; _i < _len; _i++) {
          p = plops[_i];
          p.setPosition(position);
        }
        setTimeout(function() {
          return renderer.view.style.display = 'block';
        }, 1);
      }
      return mouse = position;
    });
  } else {
    socket.on('viewport_enter', function(id, x, y, width, height) {
      return viewports.add(id, x, y, width, height);
    });
    socket.on('viewport_resize', function(id, width, height) {
      return viewports.resize(id, width, height);
    });
    socket.on('viewport_move', function(id, x, y) {
      return viewports.move(id, x, y);
    });
    return socket.on('viewport_exit', function(id) {
      return viewports.remove(id);
    });
  }
};

windowResized = function(ev) {
  appWidth = window.innerWidth;
  appHeight = window.innerHeight;
  renderer.resize(appWidth * window.devicePixelRatio, appHeight * window.devicePixelRatio);
  renderer.view.style.width = appWidth + 'px';
  renderer.view.style.height = appHeight + 'px';
  if (handheld && socket) {
    return socket.emit('viewport_resize', socket_id, appWidth, appHeight);
  }
};

mouseMoved = function(ev) {
  mouse.x = ev.pageX * window.devicePixelRatio;
  mouse.y = ev.pageY * window.devicePixelRatio;
  if (socket) {
    return socket.emit('position', {
      x: mouse.x,
      y: mouse.y
    });
  }
};

touchStarted = function(ev) {
  touchInit = {
    x: ev.touches[0].pageX * window.devicePixelRatio,
    y: ev.touches[0].pageY * window.devicePixelRatio
  };
  cameraPositionInit.x = cameraPosition.x;
  return cameraPositionInit.y = cameraPosition.y;
};

touchMoved = function(ev) {
  var x, y;
  touch.x = ev.touches[0].pageX * window.devicePixelRatio;
  touch.y = ev.touches[0].pageY * window.devicePixelRatio;
  cameraPosition.x = cameraPositionInit.x + (touch.x - touchInit.x);
  cameraPosition.y = cameraPositionInit.y + (touch.y - touchInit.y);
  cameraPosition.x = Math.min(0, cameraPosition.x);
  cameraPosition.y = Math.min(0, cameraPosition.y);
  if (handheld && socket) {
    x = -cameraPosition.x / window.devicePixelRatio;
    y = -cameraPosition.y / window.devicePixelRatio;
    return socket.emit('viewport_move', socket_id, x, y);
  }
};

animate = function() {
  var p, _i, _len;
  requestAnimFrame(animate);
  for (_i = 0, _len = plops.length; _i < _len; _i++) {
    p = plops[_i];
    p.view.x = cameraPosition.x;
    p.view.y = cameraPosition.y;
    p.update(mouse);
  }
  if (!handheld) {
    viewports.update();
  }
  return renderer.render(stage);
};

setup();
