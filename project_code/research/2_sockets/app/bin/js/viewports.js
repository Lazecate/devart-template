// Generated by CoffeeScript 1.6.3
var Viewport, Viewports;

Viewport = (function() {
  function Viewport(x, y, width, height) {
    this.view = new PIXI.Graphics();
    this.dx = this.dy = 0;
    this.move(x, y);
    this.setSize(width, height);
  }

  Viewport.prototype.setSize = function(width, height) {
    this.width = width;
    this.height = height;
    return this.redraw();
  };

  Viewport.prototype.move = function(x, y) {
    this.dx = x;
    return this.dy = y;
  };

  Viewport.prototype.update = function() {
    this.view.x += (this.dx - this.view.x) * 0.1;
    return this.view.y += (this.dy - this.view.y) * 0.1;
  };

  Viewport.prototype.redraw = function() {
    this.view.clear();
    this.view.lineStyle(3, 0xcccccc, 0.5);
    this.view.beginFill(0xcccccc, 0.1);
    return this.view.drawRect(0, 0, this.width, this.height);
  };

  return Viewport;

})();

Viewports = (function() {
  function Viewports() {
    this.vps = {};
    this.view = new PIXI.DisplayObjectContainer();
  }

  Viewports.prototype.update = function() {
    var id, vp, _ref, _results;
    _ref = this.vps;
    _results = [];
    for (id in _ref) {
      vp = _ref[id];
      _results.push(this.vps[id].update());
    }
    return _results;
  };

  Viewports.prototype.add = function(id, x, y, width, height) {
    this.vps[id] = new Viewport(x, y, width, height);
    return this.view.addChild(this.vps[id].view);
  };

  Viewports.prototype.move = function(id, x, y) {
    if (!this.vps[id]) {
      return;
    }
    return this.vps[id].move(x, y);
  };

  Viewports.prototype.resize = function(id, width, height) {
    if (!this.vps[id]) {
      return;
    }
    return this.vps[id].setSize(width, height);
  };

  Viewports.prototype.remove = function(id) {
    if (!this.vps[id]) {
      return;
    }
    this.view.removeChild(this.vps[id].view);
    return delete this.vps[id];
  };

  return Viewports;

})();
